//------------------------------------------------------------------------------
// <auto-generated>
//     Этот код создан программой.
//     Исполняемая версия:4.0.30319.42000
//
//     Изменения в этом файле могут привести к неправильной работе и будут потеряны в случае
//     повторной генерации кода.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Messenger.ServiceReference1 {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="AccountDTO", Namespace="http://schemas.datacontract.org/2004/07/Server01")]
    [System.SerializableAttribute()]
    public partial class AccountDTO : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string EmailField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int IdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private byte[] ImageField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string LoginField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string PasswordField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Email {
            get {
                return this.EmailField;
            }
            set {
                if ((object.ReferenceEquals(this.EmailField, value) != true)) {
                    this.EmailField = value;
                    this.RaisePropertyChanged("Email");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Id {
            get {
                return this.IdField;
            }
            set {
                if ((this.IdField.Equals(value) != true)) {
                    this.IdField = value;
                    this.RaisePropertyChanged("Id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public byte[] Image {
            get {
                return this.ImageField;
            }
            set {
                if ((object.ReferenceEquals(this.ImageField, value) != true)) {
                    this.ImageField = value;
                    this.RaisePropertyChanged("Image");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Login {
            get {
                return this.LoginField;
            }
            set {
                if ((object.ReferenceEquals(this.LoginField, value) != true)) {
                    this.LoginField = value;
                    this.RaisePropertyChanged("Login");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Password {
            get {
                return this.PasswordField;
            }
            set {
                if ((object.ReferenceEquals(this.PasswordField, value) != true)) {
                    this.PasswordField = value;
                    this.RaisePropertyChanged("Password");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ChatDTO", Namespace="http://schemas.datacontract.org/2004/07/Server01")]
    [System.SerializableAttribute()]
    public partial class ChatDTO : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int IdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<int> ImageIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<int> MessageIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ParticipantsField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Id {
            get {
                return this.IdField;
            }
            set {
                if ((this.IdField.Equals(value) != true)) {
                    this.IdField = value;
                    this.RaisePropertyChanged("Id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<int> ImageId {
            get {
                return this.ImageIdField;
            }
            set {
                if ((this.ImageIdField.Equals(value) != true)) {
                    this.ImageIdField = value;
                    this.RaisePropertyChanged("ImageId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<int> MessageId {
            get {
                return this.MessageIdField;
            }
            set {
                if ((this.MessageIdField.Equals(value) != true)) {
                    this.MessageIdField = value;
                    this.RaisePropertyChanged("MessageId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Participants {
            get {
                return this.ParticipantsField;
            }
            set {
                if ((object.ReferenceEquals(this.ParticipantsField, value) != true)) {
                    this.ParticipantsField = value;
                    this.RaisePropertyChanged("Participants");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="MessageDTO", Namespace="http://schemas.datacontract.org/2004/07/Server01")]
    [System.SerializableAttribute()]
    public partial class MessageDTO : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ContentField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime DataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<int> DeliverIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int IdField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Content {
            get {
                return this.ContentField;
            }
            set {
                if ((object.ReferenceEquals(this.ContentField, value) != true)) {
                    this.ContentField = value;
                    this.RaisePropertyChanged("Content");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime Data {
            get {
                return this.DataField;
            }
            set {
                if ((this.DataField.Equals(value) != true)) {
                    this.DataField = value;
                    this.RaisePropertyChanged("Data");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<int> DeliverId {
            get {
                return this.DeliverIdField;
            }
            set {
                if ((this.DeliverIdField.Equals(value) != true)) {
                    this.DeliverIdField = value;
                    this.RaisePropertyChanged("DeliverId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Id {
            get {
                return this.IdField;
            }
            set {
                if ((this.IdField.Equals(value) != true)) {
                    this.IdField = value;
                    this.RaisePropertyChanged("Id");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ContactsDTO", Namespace="http://schemas.datacontract.org/2004/07/Server01")]
    [System.SerializableAttribute()]
    public partial class ContactsDTO : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<int> ContactIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int IdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<int> OwnerIdField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<int> ContactId {
            get {
                return this.ContactIdField;
            }
            set {
                if ((this.ContactIdField.Equals(value) != true)) {
                    this.ContactIdField = value;
                    this.RaisePropertyChanged("ContactId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Id {
            get {
                return this.IdField;
            }
            set {
                if ((this.IdField.Equals(value) != true)) {
                    this.IdField = value;
                    this.RaisePropertyChanged("Id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<int> OwnerId {
            get {
                return this.OwnerIdField;
            }
            set {
                if ((this.OwnerIdField.Equals(value) != true)) {
                    this.OwnerIdField = value;
                    this.RaisePropertyChanged("OwnerId");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ChatImagesDTO", Namespace="http://schemas.datacontract.org/2004/07/Server01")]
    [System.SerializableAttribute()]
    public partial class ChatImagesDTO : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int IdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private byte[] ImageField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Id {
            get {
                return this.IdField;
            }
            set {
                if ((this.IdField.Equals(value) != true)) {
                    this.IdField = value;
                    this.RaisePropertyChanged("Id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public byte[] Image {
            get {
                return this.ImageField;
            }
            set {
                if ((object.ReferenceEquals(this.ImageField, value) != true)) {
                    this.ImageField = value;
                    this.RaisePropertyChanged("Image");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ServiceReference1.IMessenger")]
    public interface IMessenger {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMessenger/Registrate", ReplyAction="http://tempuri.org/IMessenger/RegistrateResponse")]
        void Registrate(string email, string login, string password, string name, byte[] image);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMessenger/Registrate", ReplyAction="http://tempuri.org/IMessenger/RegistrateResponse")]
        System.Threading.Tasks.Task RegistrateAsync(string email, string login, string password, string name, byte[] image);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMessenger/GetAllMessagesInChats", ReplyAction="http://tempuri.org/IMessenger/GetAllMessagesInChatsResponse")]
        Messenger.ServiceReference1.ChatDTO[] GetAllMessagesInChats(Messenger.ServiceReference1.AccountDTO account);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMessenger/GetAllMessagesInChats", ReplyAction="http://tempuri.org/IMessenger/GetAllMessagesInChatsResponse")]
        System.Threading.Tasks.Task<Messenger.ServiceReference1.ChatDTO[]> GetAllMessagesInChatsAsync(Messenger.ServiceReference1.AccountDTO account);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMessenger/GetContacts", ReplyAction="http://tempuri.org/IMessenger/GetContactsResponse")]
        Messenger.ServiceReference1.AccountDTO[] GetContacts(Messenger.ServiceReference1.AccountDTO account);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMessenger/GetContacts", ReplyAction="http://tempuri.org/IMessenger/GetContactsResponse")]
        System.Threading.Tasks.Task<Messenger.ServiceReference1.AccountDTO[]> GetContactsAsync(Messenger.ServiceReference1.AccountDTO account);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMessenger/AddContact", ReplyAction="http://tempuri.org/IMessenger/AddContactResponse")]
        void AddContact(Messenger.ServiceReference1.AccountDTO owner, Messenger.ServiceReference1.AccountDTO contact);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMessenger/AddContact", ReplyAction="http://tempuri.org/IMessenger/AddContactResponse")]
        System.Threading.Tasks.Task AddContactAsync(Messenger.ServiceReference1.AccountDTO owner, Messenger.ServiceReference1.AccountDTO contact);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMessenger/DeleteContact", ReplyAction="http://tempuri.org/IMessenger/DeleteContactResponse")]
        void DeleteContact(Messenger.ServiceReference1.AccountDTO owner, Messenger.ServiceReference1.AccountDTO contact);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMessenger/DeleteContact", ReplyAction="http://tempuri.org/IMessenger/DeleteContactResponse")]
        System.Threading.Tasks.Task DeleteContactAsync(Messenger.ServiceReference1.AccountDTO owner, Messenger.ServiceReference1.AccountDTO contact);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMessenger/IsContactAlreadyExist", ReplyAction="http://tempuri.org/IMessenger/IsContactAlreadyExistResponse")]
        bool IsContactAlreadyExist(Messenger.ServiceReference1.AccountDTO owner, Messenger.ServiceReference1.AccountDTO contact);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMessenger/IsContactAlreadyExist", ReplyAction="http://tempuri.org/IMessenger/IsContactAlreadyExistResponse")]
        System.Threading.Tasks.Task<bool> IsContactAlreadyExistAsync(Messenger.ServiceReference1.AccountDTO owner, Messenger.ServiceReference1.AccountDTO contact);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMessenger/GetUsersBySearch", ReplyAction="http://tempuri.org/IMessenger/GetUsersBySearchResponse")]
        Messenger.ServiceReference1.AccountDTO[] GetUsersBySearch(string search);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMessenger/GetUsersBySearch", ReplyAction="http://tempuri.org/IMessenger/GetUsersBySearchResponse")]
        System.Threading.Tasks.Task<Messenger.ServiceReference1.AccountDTO[]> GetUsersBySearchAsync(string search);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMessenger/GetChats", ReplyAction="http://tempuri.org/IMessenger/GetChatsResponse")]
        Messenger.ServiceReference1.ChatDTO[] GetChats(Messenger.ServiceReference1.AccountDTO account);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMessenger/GetChats", ReplyAction="http://tempuri.org/IMessenger/GetChatsResponse")]
        System.Threading.Tasks.Task<Messenger.ServiceReference1.ChatDTO[]> GetChatsAsync(Messenger.ServiceReference1.AccountDTO account);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMessenger/Login", ReplyAction="http://tempuri.org/IMessenger/LoginResponse")]
        Messenger.ServiceReference1.AccountDTO Login([System.ServiceModel.MessageParameterAttribute(Name="login")] string login1, string password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMessenger/Login", ReplyAction="http://tempuri.org/IMessenger/LoginResponse")]
        System.Threading.Tasks.Task<Messenger.ServiceReference1.AccountDTO> LoginAsync(string login, string password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMessenger/GetUserById", ReplyAction="http://tempuri.org/IMessenger/GetUserByIdResponse")]
        Messenger.ServiceReference1.AccountDTO GetUserById(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMessenger/GetUserById", ReplyAction="http://tempuri.org/IMessenger/GetUserByIdResponse")]
        System.Threading.Tasks.Task<Messenger.ServiceReference1.AccountDTO> GetUserByIdAsync(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMessenger/GetMessageById", ReplyAction="http://tempuri.org/IMessenger/GetMessageByIdResponse")]
        Messenger.ServiceReference1.MessageDTO GetMessageById(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMessenger/GetMessageById", ReplyAction="http://tempuri.org/IMessenger/GetMessageByIdResponse")]
        System.Threading.Tasks.Task<Messenger.ServiceReference1.MessageDTO> GetMessageByIdAsync(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMessenger/GetContactById", ReplyAction="http://tempuri.org/IMessenger/GetContactByIdResponse")]
        Messenger.ServiceReference1.ContactsDTO GetContactById(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMessenger/GetContactById", ReplyAction="http://tempuri.org/IMessenger/GetContactByIdResponse")]
        System.Threading.Tasks.Task<Messenger.ServiceReference1.ContactsDTO> GetContactByIdAsync(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMessenger/AddMessage", ReplyAction="http://tempuri.org/IMessenger/AddMessageResponse")]
        void AddMessage(string message, System.DateTime date, int deliverId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMessenger/AddMessage", ReplyAction="http://tempuri.org/IMessenger/AddMessageResponse")]
        System.Threading.Tasks.Task AddMessageAsync(string message, System.DateTime date, int deliverId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMessenger/GetImageByContent", ReplyAction="http://tempuri.org/IMessenger/GetImageByContentResponse")]
        Messenger.ServiceReference1.ChatImagesDTO GetImageByContent(byte[] image);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMessenger/GetImageByContent", ReplyAction="http://tempuri.org/IMessenger/GetImageByContentResponse")]
        System.Threading.Tasks.Task<Messenger.ServiceReference1.ChatImagesDTO> GetImageByContentAsync(byte[] image);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMessenger/GetMessageByContent", ReplyAction="http://tempuri.org/IMessenger/GetMessageByContentResponse")]
        Messenger.ServiceReference1.MessageDTO GetMessageByContent(string content, System.DateTime date);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMessenger/GetMessageByContent", ReplyAction="http://tempuri.org/IMessenger/GetMessageByContentResponse")]
        System.Threading.Tasks.Task<Messenger.ServiceReference1.MessageDTO> GetMessageByContentAsync(string content, System.DateTime date);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMessenger/AddImage", ReplyAction="http://tempuri.org/IMessenger/AddImageResponse")]
        void AddImage(byte[] image);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMessenger/AddImage", ReplyAction="http://tempuri.org/IMessenger/AddImageResponse")]
        System.Threading.Tasks.Task AddImageAsync(byte[] image);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMessenger/AddChat", ReplyAction="http://tempuri.org/IMessenger/AddChatResponse")]
        void AddChat(string participants, Messenger.ServiceReference1.MessageDTO message, string name, Messenger.ServiceReference1.ChatImagesDTO image);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMessenger/AddChat", ReplyAction="http://tempuri.org/IMessenger/AddChatResponse")]
        System.Threading.Tasks.Task AddChatAsync(string participants, Messenger.ServiceReference1.MessageDTO message, string name, Messenger.ServiceReference1.ChatImagesDTO image);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMessenger/IsLoginUnique", ReplyAction="http://tempuri.org/IMessenger/IsLoginUniqueResponse")]
        bool IsLoginUnique(string login);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMessenger/IsLoginUnique", ReplyAction="http://tempuri.org/IMessenger/IsLoginUniqueResponse")]
        System.Threading.Tasks.Task<bool> IsLoginUniqueAsync(string login);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IMessengerChannel : Messenger.ServiceReference1.IMessenger, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class MessengerClient : System.ServiceModel.ClientBase<Messenger.ServiceReference1.IMessenger>, Messenger.ServiceReference1.IMessenger {
        
        public MessengerClient() {
        }
        
        public MessengerClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public MessengerClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public MessengerClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public MessengerClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public void Registrate(string email, string login, string password, string name, byte[] image) {
            base.Channel.Registrate(email, login, password, name, image);
        }
        
        public System.Threading.Tasks.Task RegistrateAsync(string email, string login, string password, string name, byte[] image) {
            return base.Channel.RegistrateAsync(email, login, password, name, image);
        }
        
        public Messenger.ServiceReference1.ChatDTO[] GetAllMessagesInChats(Messenger.ServiceReference1.AccountDTO account) {
            return base.Channel.GetAllMessagesInChats(account);
        }
        
        public System.Threading.Tasks.Task<Messenger.ServiceReference1.ChatDTO[]> GetAllMessagesInChatsAsync(Messenger.ServiceReference1.AccountDTO account) {
            return base.Channel.GetAllMessagesInChatsAsync(account);
        }
        
        public Messenger.ServiceReference1.AccountDTO[] GetContacts(Messenger.ServiceReference1.AccountDTO account) {
            return base.Channel.GetContacts(account);
        }
        
        public System.Threading.Tasks.Task<Messenger.ServiceReference1.AccountDTO[]> GetContactsAsync(Messenger.ServiceReference1.AccountDTO account) {
            return base.Channel.GetContactsAsync(account);
        }
        
        public void AddContact(Messenger.ServiceReference1.AccountDTO owner, Messenger.ServiceReference1.AccountDTO contact) {
            base.Channel.AddContact(owner, contact);
        }
        
        public System.Threading.Tasks.Task AddContactAsync(Messenger.ServiceReference1.AccountDTO owner, Messenger.ServiceReference1.AccountDTO contact) {
            return base.Channel.AddContactAsync(owner, contact);
        }
        
        public void DeleteContact(Messenger.ServiceReference1.AccountDTO owner, Messenger.ServiceReference1.AccountDTO contact) {
            base.Channel.DeleteContact(owner, contact);
        }
        
        public System.Threading.Tasks.Task DeleteContactAsync(Messenger.ServiceReference1.AccountDTO owner, Messenger.ServiceReference1.AccountDTO contact) {
            return base.Channel.DeleteContactAsync(owner, contact);
        }
        
        public bool IsContactAlreadyExist(Messenger.ServiceReference1.AccountDTO owner, Messenger.ServiceReference1.AccountDTO contact) {
            return base.Channel.IsContactAlreadyExist(owner, contact);
        }
        
        public System.Threading.Tasks.Task<bool> IsContactAlreadyExistAsync(Messenger.ServiceReference1.AccountDTO owner, Messenger.ServiceReference1.AccountDTO contact) {
            return base.Channel.IsContactAlreadyExistAsync(owner, contact);
        }
        
        public Messenger.ServiceReference1.AccountDTO[] GetUsersBySearch(string search) {
            return base.Channel.GetUsersBySearch(search);
        }
        
        public System.Threading.Tasks.Task<Messenger.ServiceReference1.AccountDTO[]> GetUsersBySearchAsync(string search) {
            return base.Channel.GetUsersBySearchAsync(search);
        }
        
        public Messenger.ServiceReference1.ChatDTO[] GetChats(Messenger.ServiceReference1.AccountDTO account) {
            return base.Channel.GetChats(account);
        }
        
        public System.Threading.Tasks.Task<Messenger.ServiceReference1.ChatDTO[]> GetChatsAsync(Messenger.ServiceReference1.AccountDTO account) {
            return base.Channel.GetChatsAsync(account);
        }
        
        public Messenger.ServiceReference1.AccountDTO Login(string login1, string password) {
            return base.Channel.Login(login1, password);
        }
        
        public System.Threading.Tasks.Task<Messenger.ServiceReference1.AccountDTO> LoginAsync(string login, string password) {
            return base.Channel.LoginAsync(login, password);
        }
        
        public Messenger.ServiceReference1.AccountDTO GetUserById(int id) {
            return base.Channel.GetUserById(id);
        }
        
        public System.Threading.Tasks.Task<Messenger.ServiceReference1.AccountDTO> GetUserByIdAsync(int id) {
            return base.Channel.GetUserByIdAsync(id);
        }
        
        public Messenger.ServiceReference1.MessageDTO GetMessageById(int id) {
            return base.Channel.GetMessageById(id);
        }
        
        public System.Threading.Tasks.Task<Messenger.ServiceReference1.MessageDTO> GetMessageByIdAsync(int id) {
            return base.Channel.GetMessageByIdAsync(id);
        }
        
        public Messenger.ServiceReference1.ContactsDTO GetContactById(int id) {
            return base.Channel.GetContactById(id);
        }
        
        public System.Threading.Tasks.Task<Messenger.ServiceReference1.ContactsDTO> GetContactByIdAsync(int id) {
            return base.Channel.GetContactByIdAsync(id);
        }
        
        public void AddMessage(string message, System.DateTime date, int deliverId) {
            base.Channel.AddMessage(message, date, deliverId);
        }
        
        public System.Threading.Tasks.Task AddMessageAsync(string message, System.DateTime date, int deliverId) {
            return base.Channel.AddMessageAsync(message, date, deliverId);
        }
        
        public Messenger.ServiceReference1.ChatImagesDTO GetImageByContent(byte[] image) {
            return base.Channel.GetImageByContent(image);
        }
        
        public System.Threading.Tasks.Task<Messenger.ServiceReference1.ChatImagesDTO> GetImageByContentAsync(byte[] image) {
            return base.Channel.GetImageByContentAsync(image);
        }
        
        public Messenger.ServiceReference1.MessageDTO GetMessageByContent(string content, System.DateTime date) {
            return base.Channel.GetMessageByContent(content, date);
        }
        
        public System.Threading.Tasks.Task<Messenger.ServiceReference1.MessageDTO> GetMessageByContentAsync(string content, System.DateTime date) {
            return base.Channel.GetMessageByContentAsync(content, date);
        }
        
        public void AddImage(byte[] image) {
            base.Channel.AddImage(image);
        }
        
        public System.Threading.Tasks.Task AddImageAsync(byte[] image) {
            return base.Channel.AddImageAsync(image);
        }
        
        public void AddChat(string participants, Messenger.ServiceReference1.MessageDTO message, string name, Messenger.ServiceReference1.ChatImagesDTO image) {
            base.Channel.AddChat(participants, message, name, image);
        }
        
        public System.Threading.Tasks.Task AddChatAsync(string participants, Messenger.ServiceReference1.MessageDTO message, string name, Messenger.ServiceReference1.ChatImagesDTO image) {
            return base.Channel.AddChatAsync(participants, message, name, image);
        }
        
        public bool IsLoginUnique(string login) {
            return base.Channel.IsLoginUnique(login);
        }
        
        public System.Threading.Tasks.Task<bool> IsLoginUniqueAsync(string login) {
            return base.Channel.IsLoginUniqueAsync(login);
        }
    }
}
